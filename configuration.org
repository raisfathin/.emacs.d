* Package

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives
	     '("org" . "http://orgmode.org/elpa/") t)

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

* Evil Mode

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  (setq evil-search-module 'isearch)
  (setq evil-vsplit-window-right t)
  :config
  (evil-mode 1))

(use-package vimish-fold
  :ensure t
  :after evil)

(use-package evil-vimish-fold
  :ensure t
  :after vimish-fold
  :config
  (evil-vimish-fold-mode 1))

(use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

* Appearances

#+BEGIN_SRC emacs-lisp
;; (use-package solarized-theme
;;   :ensure t
;;   :config
;;   (load-theme 'solarized-dark t))

;; (use-package flatui-dark-theme
;;   :ensure t
;;   :config
;;   (load-theme 'flatui-dark t))

(use-package nord-theme
  :ensure t
  :config
  (load-theme 'nord t))

;; (use-package material-theme
;;   :ensure t
;;   :config
;;   (load-theme 'material t))

(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

(use-package nlinum
  :ensure t)

(use-package linum-relative
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'linum-relative-on))

(use-package nyan-mode
  :ensure t
  :config
  (nyan-mode))

(use-package smart-mode-line
  :ensure t
  :after solarized-theme
  :config
  (sml/setup))

(add-hook 'prog-mode-hook (lambda ()
                            (linum-on)
                            (rainbow-delimiters-mode)))
(add-hook 'text-mode-hook (lambda ()
			    (linum-on)
			    (linum-relative-off)))
(electric-pair-mode)
(tool-bar-mode -1)

;; Auto refresh buffers
(global-auto-revert-mode t)
#+END_SRC

* Autocompletions

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode))

(use-package ycmd
  :ensure t
  :init
  (add-hook 'after-init-hook #'global-ycmd-mode)
  (set-variable 'ycmd-server-command '("python" "/Users/raisfathin/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd"))
  (set-variable 'ycmd-global-config "/Users/raisfathin/.ycm_extra_conf.py"))

(use-package company-ycmd
  :ensure t
  :config
  (company-ycmd-setup))

(use-package flx-ido
  :ensure t)

(use-package ido-vertical-mode
  :ensure t
  :after flx-ido
  :config
  (ido-mode t)
  (ido-vertical-mode t)
  (ido-everywhere 1)
  (flx-ido-mode 1))
#+END_SRC

* No Tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

* Buffer / Window

#+BEGIN_SRC elisp
(use-package ace-window
  :ensure t
  :init
  (global-set-key (kbd "M-p") 'ace-window))
#+END_SRC

* Major Mode Specific Configs
** C++

#+BEGIN_SRC emacs-lisp
(use-package modern-cpp-font-lock
  :ensure t
  :config
  (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode))

(use-package google-c-style
  :ensure t
  :config
  (add-hook 'c-mode-common-hook 'google-set-c-style))

(add-hook 'c++-mode-hook
          (lambda ()
            (set (make-local-variable 'compile-command)
                 (concat
                  "g++ -Wl,-stack_size -Wl,0x1000000000 -std=c++14 -g -D__DEBUG -fsanitize=address -o "
                  (shell-quote-argument (file-name-sans-extension buffer-file-name))
                  " " (shell-quote-argument buffer-file-name)))))

(load "/usr/local/Cellar/clang-format/2017-06-22/share/clang/clang-format.el")

(defadvice c-lineup-arglist (around my activate)
  "Improve indentation of continued C++11 lambda function opened as argument."
  (setq ad-return-value
        (if (and (equal major-mode 'c++-mode)
                 (ignore-errors
                   (save-excursion
                     (goto-char (c-langelem-pos langelem))
                     ;; Detect "[...](" or "[...]{". preceded by "," or "(",
                     ;;   and with unclosed brace.
                     (looking-at ".*[(,][ \t]*\\[[^]]*\\][ \t]*[({][^}]*$"))))
            0                           ; no additional indent
          ad-do-it)))                   ; default behavior
#+END_SRC

** Common Lisp
#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :init
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy))
  (evil-leader/set-key-for-mode 'lisp-mode
    "cd" 'slime-compile-defun
    "lf" 'slime-load-file))

(use-package parinfer
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults
             pretty-parens
             evil
             paredit
             smart-tab
             smart-yank))
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
** D

#+BEGIN_SRC emacs-lisp
(use-package d-mode
  :ensure t)
#+END_SRC

** OCaml

#+BEGIN_SRC emacs-lisp
(use-package tuareg
  :ensure t)

(add-to-list 'load-path "/Users/raisfathin/.opam/system/share/emacs/site-lisp")

(require 'ocp-indent)
#+END_SRC

** Term

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
  (evil-set-initial-state 'term-mode 'emacs))
(with-eval-after-load 'term
  (setq term-scroll-to-bottom-on-output t))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)

(use-package ox-reveal
  :ensure t
  :config
  (setq org-reveal-root "file:///Users/raisfathin/git/reveal.js"))

(use-package htmlize
  :ensure t)

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Web Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2))
  (add-hook 'web-mode-hook  'my-web-mode-hook)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
  (setq web-mode-engines-alist
	'(("php" . "\\.phtml\\'")
	  ("blade" . "\\.blade\\."))))
#+END_SRC

** JSX
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t
  :config (setq js2-basic-offset 2))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t)
#+END_SRC 
** Typescript

#+BEGIN_SRC elisp
(use-package tide
  :ensure t)

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

(setq company-tooltip-align-annotations t)

(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

** Eshell

#+BEGIN_SRC emacs-lisp
(use-package eshell-git-prompt
  :ensure t
  :config
  (eshell-git-prompt-use-theme 'git-radar))
#+END_SRC

** Vue Mode

#+BEGIN_SRC emacs-lisp
(use-package vue-mode
  :ensure t)
#+END_SRC   

** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t)
#+END_SRC

* Project Management Stuff

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)

(use-package projectile
  :ensure t)
#+END_SRC

* Keybindings

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
  (define-key evil-normal-state-map ",bb" 'ido-switch-buffer)
  (define-key evil-normal-state-map ",es" 'eval-last-sexp)
  (define-key evil-normal-state-map ",tt" 'ansi-term)
  (define-key evil-normal-state-map ",gs" 'magit-status)
  (define-key evil-normal-state-map ",pf" 'projectile-find-file)
  (define-key evil-visual-state-map ",cf" 'clang-format)
  (define-key evil-normal-state-map ",cf" 'clang-format))

(evil-leader/set-leader ",")
(evil-leader/set-key
  "f" 'find-file)
#+END_SRC

* Music Player

#+BEGIN_SRC emacs-lisp
(use-package emms
  :ensure t
  :config
  (progn
    (emms-standard)
    (emms-default-players)
    (define-emms-simple-player afplay '(file)
      (regexp-opt '(".mp3" ".m4a" ".aac"))
      "afplay")
    (setq emms-player-list '(emms-player-afplay))
    (setq emms-source-file-default-directory "~/Music")))
#+END_SRC

* $PATH Fix

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC
